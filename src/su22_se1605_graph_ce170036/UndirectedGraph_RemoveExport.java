/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package su22_se1605_graph_ce170036;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Pham Nhat Quang CE170036
 */
public class UndirectedGraph_RemoveExport extends javax.swing.JFrame {
    private GPaper p = null;
    JFileChooser fileChooser;
    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyyMMdd_HHmmss");
    /**
     * Creates new form UndirectedGraph_DrawSaveOpenExport
     */
    public UndirectedGraph_RemoveExport() {
        initComponents();
         try{
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Images/graph-icon.png")));
       } catch (Exception e){
           
       }
         this.setResizable(false);
         this.setLocationRelativeTo(null);
        p = new GPaper();
        p.setTxtGraphInfo(graphInfo);
        
        pnlPaper.setLayout(new BorderLayout());
        pnlPaper.add(p,BorderLayout.CENTER);
        
        fileChooser = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        infoType = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        pnlGraphInformation = new javax.swing.JPanel();
        btnMatrix = new javax.swing.JRadioButton();
        btnList = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        graphInfo = new javax.swing.JTextArea();
        pnlPaper = new javax.swing.JPanel();
        jMenuBar2 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        fOpen = new javax.swing.JMenuItem();
        fSaveAs = new javax.swing.JMenu();
        fSaveMatrix = new javax.swing.JMenuItem();
        fSaveList = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        fExit = new javax.swing.JMenuItem();
        menuGraph = new javax.swing.JMenu();
        gClear = new javax.swing.JMenuItem();
        export = new javax.swing.JMenuItem();
        menuAlgorithm = new javax.swing.JMenu();
        aShortestPath = new javax.swing.JMenuItem();
        aSpanningTree = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        BFS = new javax.swing.JMenuItem();
        DFS = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("<html>###### Draw Vertices ######<br> #1. Hole Ctrl and click on space<br> &nbsp;&nbsp;&nbsp;&nbsp;to add new vertex.<br> #2. Hold Shift and click on the vertex that you<br> &nbsp;&nbsp;&nbsp;&nbsp;want to remove.<br> #3. Drag and drop a vertex to move it.<br> <br> ###### Draw Edges ######<br> #1. Select start vertex<br> &nbsp;&nbsp;&nbsp;&nbsp;(click it again to unselect)<br> #2. Select destination vertex<br> #3. Input edge's value<br> #4. Click on value of the existing edge to update </html>");

        pnlGraphInformation.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph's Information"));

        infoType.add(btnMatrix);
        btnMatrix.setSelected(true);
        btnMatrix.setText("Matrix");
        btnMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMatrixActionPerformed(evt);
            }
        });

        infoType.add(btnList);
        btnList.setText("List");
        btnList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListActionPerformed(evt);
            }
        });

        graphInfo.setEditable(false);
        graphInfo.setColumns(20);
        graphInfo.setLineWrap(true);
        graphInfo.setRows(10);
        jScrollPane1.setViewportView(graphInfo);

        javax.swing.GroupLayout pnlGraphInformationLayout = new javax.swing.GroupLayout(pnlGraphInformation);
        pnlGraphInformation.setLayout(pnlGraphInformationLayout);
        pnlGraphInformationLayout.setHorizontalGroup(
            pnlGraphInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGraphInformationLayout.createSequentialGroup()
                .addComponent(btnMatrix)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnList))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        pnlGraphInformationLayout.setVerticalGroup(
            pnlGraphInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGraphInformationLayout.createSequentialGroup()
                .addGroup(pnlGraphInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMatrix)
                    .addComponent(btnList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlPaper.setBorder(javax.swing.BorderFactory.createTitledBorder("Draw graph yourself"));

        javax.swing.GroupLayout pnlPaperLayout = new javax.swing.GroupLayout(pnlPaper);
        pnlPaper.setLayout(pnlPaperLayout);
        pnlPaperLayout.setHorizontalGroup(
            pnlPaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 694, Short.MAX_VALUE)
        );
        pnlPaperLayout.setVerticalGroup(
            pnlPaperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuFile.setText("File");

        fOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/open.png"))); // NOI18N
        fOpen.setMnemonic('O');
        fOpen.setText("Open");
        fOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fOpenActionPerformed(evt);
            }
        });
        menuFile.add(fOpen);

        fSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/save.png"))); // NOI18N
        fSaveAs.setText("Save as");

        fSaveMatrix.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fSaveMatrix.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/matrix.png"))); // NOI18N
        fSaveMatrix.setMnemonic('M');
        fSaveMatrix.setText("Matrix");
        fSaveMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fSaveMatrixActionPerformed(evt);
            }
        });
        fSaveAs.add(fSaveMatrix);

        fSaveList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fSaveList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/list.png"))); // NOI18N
        fSaveList.setMnemonic('L');
        fSaveList.setText("List");
        fSaveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fSaveListActionPerformed(evt);
            }
        });
        fSaveAs.add(fSaveList);

        menuFile.add(fSaveAs);
        menuFile.add(jSeparator1);

        fExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.CTRL_MASK));
        fExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/exit.png"))); // NOI18N
        fExit.setMnemonic('E');
        fExit.setText("Exit");
        fExit.setToolTipText("");
        fExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fExitActionPerformed(evt);
            }
        });
        menuFile.add(fExit);

        jMenuBar2.add(menuFile);

        menuGraph.setMnemonic('G');
        menuGraph.setText("Graph");

        gClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, java.awt.event.InputEvent.CTRL_MASK));
        gClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/clear.png"))); // NOI18N
        gClear.setMnemonic('C');
        gClear.setText("Clear");
        gClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gClearActionPerformed(evt);
            }
        });
        menuGraph.add(gClear);

        export.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/export.png"))); // NOI18N
        export.setMnemonic('E');
        export.setText("Export PNG");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });
        menuGraph.add(export);

        jMenuBar2.add(menuGraph);

        menuAlgorithm.setMnemonic('A');
        menuAlgorithm.setText("Algorithm");

        aShortestPath.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        aShortestPath.setMnemonic('s');
        aShortestPath.setText("Find Shortest Path");
        menuAlgorithm.add(aShortestPath);

        aSpanningTree.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        aSpanningTree.setText("Find Minimum Spanning Tree");
        menuAlgorithm.add(aSpanningTree);

        jMenu3.setText("Traversing");

        BFS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        BFS.setMnemonic('B');
        BFS.setText("BFS");
        jMenu3.add(BFS);

        DFS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        DFS.setMnemonic('D');
        DFS.setText("DFS");
        jMenu3.add(DFS);

        menuAlgorithm.add(jMenu3);

        jMenuBar2.add(menuAlgorithm);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(pnlGraphInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPaper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlPaper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlGraphInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fOpenActionPerformed
        fileChooser.setFileFilter(new FileNameExtensionFilter("Graph data (*.mtx, *.list)", "mtx","lst"));
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            if (!fileChooser.getSelectedFile().exists()){
                return;
            }
            File fileOpen = fileChooser.getSelectedFile();
            if (fileOpen.getName().endsWith(".mtx")){
                p.readMatrixDataFile(fileOpen);
            } else if (fileOpen.getName().endsWith(".lst")){
                p.readListDataFile(fileOpen);
            }
        }
    }//GEN-LAST:event_fOpenActionPerformed

    private void fSaveMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fSaveMatrixActionPerformed
        File saveFile = getSaveFile(new FileNameExtensionFilter("Graph data (*.mtx)", "mtx"),
                "graph_" + sdfDate.format(Calendar.getInstance().getTime()) + ".mtx");
        if (saveFile!=null){
            if (saveFile.getName().endsWith(".mtx")){
                ArrayList<GVertex> vertices = p.getVertices();
                int[][] graph = p.getGraph();
                int numberOfVertex = p.getNumberOfVertices();
                FileWriter fw = null;
                String strData = "";
                String strXY = "";
                
                for (int i = 0; i < vertices.size(); i++) {
                    strXY+="\n" + vertices.get(i).getX() + " " + vertices.get(i).getY();
                }
                
                try{
                    strData+=numberOfVertex;
                    strData+=strXY;
                    for (int i = 0; i < numberOfVertex; i++) {
                        strData+="\n" + graph[i][0];
                        for (int j = 1; j < numberOfVertex; j++) {
                            strData+=" " + graph[i][j];
                        }
                    }
                    fw = new FileWriter(saveFile);
                    fw.write(strData);
                    fw.flush();
                    fw.close();
                } catch (IOException ex){
                    System.err.println(ex);
                } finally{
                    try{
                        fw.close();
                    } catch (IOException ex){
                        System.err.println(ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_fSaveMatrixActionPerformed

    private void fSaveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fSaveListActionPerformed
        File saveFile = getSaveFile(new FileNameExtensionFilter("Graph data (*.lst)", "lst"),
                "graph_" + sdfDate.format(Calendar.getInstance().getTime()) + ".lst");
        if (saveFile!=null){
            if (saveFile.getName().endsWith(".lst")){
                ArrayList<GVertex> vertices = p.getVertices();
                int[][] graph = p.getGraph();
                int numberOfVertex = p.getNumberOfVertices();
                FileWriter fw = null;
                String strData = "";
                String strXY = "";
                
                for (int i = 0; i < vertices.size(); i++) {
                    strXY+="\n" + vertices.get(i).getX() + " " + vertices.get(i).getY();
                }
                
                try{
                    int countEdge = 0;
                    for (int i = 0; i < numberOfVertex - 1; i++) {
                        for (int j = i + 1; j < numberOfVertex; j++) {
                            if (graph[i][j]>0){
                                strData+="\n" + i + " " + j + " " + graph[i][j];
                                ++countEdge;
                            }
                        }
                    }
                    strData=numberOfVertex + " " + countEdge + strXY + strData;
                    fw = new FileWriter(saveFile);
                    fw.write(strData);
                    fw.flush();
                    fw.close();
                } catch (IOException ex){
                    System.err.println(ex);
                } finally{
                    try{
                        fw.close();
                    } catch (IOException ex){
                        System.err.println(ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_fSaveListActionPerformed

    private void fExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fExitActionPerformed
        System.exit(0);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_fExitActionPerformed
    public File getSaveFile(FileNameExtensionFilter filter, String fName){
        fileChooser.setFileFilter(filter);
        fileChooser.setSelectedFile(new File(fName));
        
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
            if (fileChooser.getSelectedFile().exists()){
                int response = JOptionPane.showConfirmDialog(null, "Do you want to replace the existing file?", "Confirm",
                        JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if (response!=JOptionPane.YES_OPTION){
                    return null;
                }
            }
            return fileChooser.getSelectedFile();
        }
        return null;
    }
    
    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        File saveFile = getSaveFile(new FileNameExtensionFilter("PNG image (*.png*)", "png"), "export_" + 
                sdfDate.format(Calendar.getInstance().getTime())+ ".png");
        if (saveFile!=null){
            BufferedImage image = new BufferedImage(p.getWidth(),p.getHeight(),BufferedImage.TYPE_INT_RGB);
            Graphics2D g = image.createGraphics();
            p.printAll(g);
            
            g.setColor(Color.red);
            g.drawString("Phạm Nhật Quang # SUMMER 2022 # CSD201 # SE1605", 10, 20);
            
            g.dispose();
            
            try{
                ImageIO.write(image, "png", saveFile);
            } catch ( IOException ioe){
                System.err.println(ioe);
            }
        }
    }//GEN-LAST:event_exportActionPerformed

    private void btnMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMatrixActionPerformed
        this.p.setGraphType(0);
    }//GEN-LAST:event_btnMatrixActionPerformed

    private void btnListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListActionPerformed
        this.p.setGraphType(1);
    }//GEN-LAST:event_btnListActionPerformed

    private void gClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gClearActionPerformed
        this.p.clear();
    }//GEN-LAST:event_gClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph_RemoveExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph_RemoveExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph_RemoveExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UndirectedGraph_RemoveExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UndirectedGraph_RemoveExport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BFS;
    private javax.swing.JMenuItem DFS;
    private javax.swing.JMenuItem aShortestPath;
    private javax.swing.JMenuItem aSpanningTree;
    private javax.swing.JRadioButton btnList;
    private javax.swing.JRadioButton btnMatrix;
    private javax.swing.JMenuItem export;
    private javax.swing.JMenuItem fExit;
    private javax.swing.JMenuItem fOpen;
    private javax.swing.JMenu fSaveAs;
    private javax.swing.JMenuItem fSaveList;
    private javax.swing.JMenuItem fSaveMatrix;
    private javax.swing.JMenuItem gClear;
    private javax.swing.JTextArea graphInfo;
    private javax.swing.ButtonGroup infoType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenu menuAlgorithm;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuGraph;
    private javax.swing.JPanel pnlGraphInformation;
    private javax.swing.JPanel pnlPaper;
    // End of variables declaration//GEN-END:variables
}
